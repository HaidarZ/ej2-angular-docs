@(Html.EJS().Chart("container").Title("Sales History of Product X").Load("load").Loaded("loaded").PointRender("pointRender").Series(series =>
{
    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
        XName("xValue").
        YName("yValue").
        Marker(mr => mr.Visible(true).Height(10).Width(10)).
        DataSource(ViewBag.dataSource).Add();
}).Annotations(an =>
{
    an.X("30").Y("2").CoordinateUnits(Syncfusion.EJ2.Charts.Units.Point).Content("<div>LCL</div>").Add();
    an.X("30").Y("2").CoordinateUnits(Syncfusion.EJ2.Charts.Units.Point).Content("<div>CL</div>").Add();
    an.X("30").Y("2").CoordinateUnits(Syncfusion.EJ2.Charts.Units.Point).Content("<div>UCL</div>").Add();
    an.X("400").Y("500").CoordinateUnits(Syncfusion.EJ2.Charts.Units.Point).Content("<div>Number of groups: xx</div><div>CL: xx</div><div>LCL: xx</div><div>UCL: xx</div><div>Standard Divation: xx</div>").Add();
}).
   PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).MajorGridLines(mg => mg.Width(0)).MajorTickLines(mt => mt.Width(0)))
   .PrimaryYAxis(py => py.MajorGridLines(mg => mg.Width(0)).MajorTickLines(mt => mt.Width(0)).StripLines(ViewBag.yAxisStripLine))
   .Render()
)

<script>
    var mean = 0, LCL = 0, UCL = 0, s = 0;
    function load(args) {
        // calculate the mean value
        for (var i = 0; i < args.chart.series[0].dataSource.length; i++) {
            mean = (mean) + (+args.chart.series[0].dataSource[i].yValue);
        }
        mean = mean / args.chart.series[0].dataSource.length;
        for (var i = 0; i < args.chart.series[0].dataSource.length; i++) {
            s += ((+args.chart.series[0].dataSource[i].yValue) - mean) * ((+args.chart.series[0].dataSource[i].yValue) - mean);
        }
        // calculate the standard divation here
        s = s / args.chart.series[0].dataSource.length;
        s = Math.sqrt(s);
        // Calculate LCL and UCL
        LCL = mean - (1.5 * s);
        UCL = mean + (1.5 * s);
        // set the strip line ranges based on the LCL and UCL
        args.chart.primaryYAxis.stripLines[0].start = LCL;
        args.chart.primaryYAxis.stripLines[0].end = LCL + 0.0125;
        args.chart.primaryYAxis.stripLines[1].start = mean;
        args.chart.primaryYAxis.stripLines[1].end = mean + 0.25;
        args.chart.primaryYAxis.stripLines[2].start = UCL;
        args.chart.primaryYAxis.stripLines[2].end = UCL + 0.0135;

        args.chart.annotations[0].x = args.chart.series[0].dataSource[args.chart.series[0].dataSource.length - 1].xValue;
        args.chart.annotations[0].y = LCL;
        args.chart.annotations[1].x = args.chart.series[0].dataSource[args.chart.series[0].dataSource.length - 1].xValue;
        args.chart.annotations[1].y = mean;
        args.chart.annotations[2].x = args.chart.series[0].dataSource[args.chart.series[0].dataSource.length - 1].xValue;
        args.chart.annotations[2].y = UCL;
    }
    function loaded(args) {
        var strip1 = document.getElementById('container_stripline_Behind_rect_primaryYAxis_0');
        strip1.setAttribute('stroke', 'black');
        strip1.setAttribute('stroke-dasharray', '5');
        var strip2 = document.getElementById('container_stripline_Behind_rect_primaryYAxis_0');
        strip2.setAttribute('stroke', 'black');
        strip2.setAttribute('stroke-dasharray', '5');
        var annotation = document.getElementById('container_Annotation_Collections');
        var child, left;
        for (var i = 0; i < annotation.children.length - 1; i++) {
            child = annotation.children[i];
            left = child.style.left;
            left = +(left.replace('px', '')) + 20;
            child.style.left = left + 'px';
        }
        annotation.children[3].children[0].innerText = annotation.children[3].children[0].innerText.replace('xx', args.chart.series[0].dataSource.length);
        annotation.children[3].children[1].innerText = annotation.children[3].children[1].innerText.replace('xx', mean);
        annotation.children[3].children[2].innerText = annotation.children[3].children[2].innerText.replace('xx', LCL);
        annotation.children[3].children[3].innerText = annotation.children[3].children[3].innerText.replace('xx', UCL);
        annotation.children[3].children[4].innerText = annotation.children[3].children[4].innerText.replace('xx', s);
    }

    function pointRender(args) {
        if (args.point.y > UCL) {
            args.fill = 'red';

        }
    }
</script>