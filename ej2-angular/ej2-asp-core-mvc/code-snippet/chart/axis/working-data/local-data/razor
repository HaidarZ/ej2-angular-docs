  @Html.EJS().Chart("container").
  ChartArea(area => area.Border(ViewBag.chartBorder)).
  Series(series =>
   {
       series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Width(2).XName("x").YName("y").DataSource("series1").Name("Product X").Add();
   }).
   PrimaryXAxis(px => px.Skeleton("y").Title("Years").MajorGridLines(ViewBag.majorGridLines).
   ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).
   EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift).
   LabelFormat("y")).
   PrimaryYAxis(py => py.Title("Price").
   LineStyle(ViewBag.lineStyle).
   MajorTickLines(ViewBag.majorTickLines).
   MinorTickLines(ViewBag.minorTickLines).
   RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None).
   LabelFormat("${value}").EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift).
   Title("Profit")).
   Title("Stock Price Analysis").
   LegendSettings(lg => lg.Visible(true)).Render()

<script>
    var series1 = [];
    var point1;
    var value = 80;
    var i;
    for (i = 1; i < 500; i++) {
        if (Math.random() > .5) {
            value += Math.random();
        }
        else {
            value -= Math.random();
        }
        point1 = { x: new Date(1960, (i + 1), i), y: Math.round(value) };
        series1.push(point1);
    }
</script>