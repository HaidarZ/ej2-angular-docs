@using Syncfusion.EJ2.PivotView

@Html.EJS().PivotView("pivotview").Width("100%").Height("300").DataBound("trend").DataSourceSettings(dataSourceSettings => dataSourceSettings.DataSource((IEnumerable<object>)ViewBag.DataSource).ExpandAll(true).EnableSorting(true)
    .DrilledMembers(drilledmembers =>{
        drilledmembers.Name("Year").Items(ViewBag.drilledMembers).Add();
        })
    .FormatSettings(formatsettings => { 
        formatsettings.Name("ProCost").Format("C0").Add(); 
        })
    .Rows(rows => { 
        rows.Name("Year").Caption("Year").Add(); rows.Name("HalfYear").Caption("Half Year").Add(); 
        })
    .Columns(columns => { 
        columns.Name("EnerType").Caption("Energy Type").Add(); columns.Name("EneSource").Caption("Energy Source").Add(); 
        })
    .Values(values => { 
        values.Name("ProCost").Caption("Revenue Growth").Add(); 
    })).GridSettings(new PivotViewGridSettings { ColumnWidth = 140 }).CellTemplate("${getCellContent(data)}").Render()

    <script>

        window.getCellContent = function (e) {
            var template;
            if (e && e.targetCell.className.indexOf('e-valuescontent') > -1) {
                template = '<span class="tempwrap sb-icon-neutral pv-icons"></span>';
            } else {
                template = '';
            }
            return template;
        };

        /* jshint ignore:start */
        function trend() {
            var pivotObj = document.getElementById('pivotview').ej2_instances[0];
            var cTable = document.getElementsByClassName("e-table");
            var colLen = pivotObj.pivotValues[3].length;
            var cLen = cTable[3].children[0].children.length;
            var rLen = cTable[3].children[1].children.length;

            for (let k = 0; k < rLen; k++) {
                if (pivotObj.pivotValues[k] && pivotObj.pivotValues[k][0] !== undefined) {
                    rowIndx = (pivotObj.pivotValues[k][0]).rowIndex;
                    break;
                }
            }
            var rowHeaders = [].slice.call(cTable[2].children[1].querySelectorAll('td'));
            var rows = pivotObj.dataSourceSettings.rows;
            if (rowHeaders.length > 1) {
                for (var i = 0, Cnt = rows; i < Cnt.length; i++) {
                    var fields = {};
                    var fieldHeaders = [];
                    for (var j = 0, Lnt = rowHeaders; j < Lnt.length; j++) {
                        var header = rowHeaders[j];
                        if (header.className.indexOf('e-gtot') === -1 && header.className.indexOf('e-rowsheader') > -1 && header.getAttribute('fieldname') === rows[i].name) {
                            var headerName = rowHeaders[j].getAttribute('fieldname') + '_' + rowHeaders[j].textContent;
                            fields[rowHeaders[j].textContent] = j;
                            fieldHeaders.push(rowHeaders[j].textContent);
                        }
                    }
                    if (i === 0) {
                        for (var rnt = 0, Lnt = fieldHeaders; rnt < Lnt.length; rnt++) {
                            if (rnt !== 0) {
                                var row = fields[fieldHeaders[rnt]];
                                var prevRow = fields[fieldHeaders[rnt - 1]];
                                for (var j = 0, ci = 1; j < cLen && ci < colLen; j++ , ci++) {
                                    if (!cTable[3].children[1].children[row]) {
                                        break;
                                    }
                                    var node = cTable[3].children[1].children[row].childNodes[j];
                                    var prevNode = cTable[3].children[1].children[prevRow].childNodes[j];
                                    var ri = undefined;
                                    var prevRi = undefined;
                                    if (node) {
                                        ri = node.getAttribute('index');
                                    }
                                    if (prevNode) {
                                        prevRi = prevNode.getAttribute('index');
                                    }
                                    if (ri && ri < pivotObj.pivotValues.length) {
                                        if ((pivotObj.pivotValues[prevRi][ci]).value > (pivotObj.pivotValues[ri][ci]).value && node.querySelector('.tempwrap')) {
                                            var trendElement = node.querySelector('.tempwrap');
                                            trendElement.className = trendElement.className.replace('sb-icon-neutral', 'sb-icon-loss');
                                        } else if ((pivotObj.pivotValues[prevRi][ci]).value < (pivotObj.pivotValues[ri][ci]).value && node.querySelector('.tempwrap')) {
                                            var trendElement = node.querySelector('.tempwrap');
                                            trendElement.className = trendElement.className.replace('sb-icon-neutral', 'sb-icon-profit');
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        for (var rnt = 0, Lnt = fieldHeaders; rnt < Lnt.length; rnt++) {
                            var row = fields[fieldHeaders[rnt]];
                            for (var j = 0, ci = 1; j < cLen && ci < colLen; j++ , ci++) {
                                if (!cTable[3].children[1].children[row]) {
                                    break;
                                }
                                var node = cTable[3].children[1].children[row].childNodes[j];
                                var prevNode = cTable[3].children[1].children[row - 1].childNodes[j];
                                var ri = undefined;
                                var prevRi = undefined;
                                if (node) {
                                    ri = node.getAttribute('index');
                                }
                                if (prevNode) {
                                    prevRi = prevNode.getAttribute('index');
                                }
                                if (ri && ri < pivotObj.pivotValues.length) {
                                    var cRowFieldName = cTable[2].children[1].children[row].childNodes[0].getAttribute('fieldname');
                                    var prevRowFieldName = cTable[2].children[1].children[row - 1].childNodes[0].getAttribute('fieldname');
                                    if ((pivotObj.pivotValues[prevRi][ci]).value > (pivotObj.pivotValues[ri][ci]).value && node.querySelector('.tempwrap') &&
                                        cRowFieldName === prevRowFieldName) {
                                        var trendElement = node.querySelector('.tempwrap');
                                        trendElement.className = trendElement.className.replace('sb-icon-neutral', 'sb-icon-loss');
                                    } else if ((pivotObj.pivotValues[prevRi][ci]).value < (pivotObj.pivotValues[ri][ci]).value && node.querySelector('.tempwrap') &&
                                        cRowFieldName === prevRowFieldName) {
                                        var trendElement = node.querySelector('.tempwrap');
                                        trendElement.className = trendElement.className.replace('sb-icon-neutral', 'sb-icon-profit');
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        /* jshint ignore:end */
    </script>