
<div class="container-fluid">
    <div class="row">
        <div class="col-md-6">
            <h4>Kanban A</h4>
            <ejs-kanban id="kanbanA" keyField="Status" dataSource="@ViewBag.data" externalDropId="@ViewBag.externalDropIdA" dragStop="onDragStopA">
                <e-kanban-columns>
                    <e-kanban-column headerText="To Do" keyField="Open"></e-kanban-column>
                    <e-kanban-column headerText="Done" keyField="Close"></e-kanban-column>
                </e-kanban-columns>
                <e-kanban-cardsettings headerField="Id" contentField="Summary"></e-kanban-cardsettings>
            </ejs-kanban>
        </div>
        <div class="col-md-6">
            <h4>Kanban B</h4>
            <ejs-kanban id="kanbanB" keyField="Status" dataSource="@ViewBag.data" externalDropId="@ViewBag.externalDropIdB" dragStop="onDragStopB">
                <e-kanban-columns>
                    <e-kanban-column headerText="To Do" keyField="Open"></e-kanban-column>
                    <e-kanban-column headerText="Done" keyField="Close"></e-kanban-column>
                </e-kanban-columns>
                <e-kanban-cardsettings headerField="Id" contentField="Summary"></e-kanban-cardsettings>
            </ejs-kanban>
        </div>
    </div>
</div>
<script>
    function onDragStopA(args) {
        var kanbanObjA = document.querySelector("#kanbanA").ej2_instances[0];
        var kanbanObjB = document.querySelector("#kanbanB").ej2_instances[0];
        if (ej.base.closest(args.event.target, '#kanbanB')) {
            kanbanObjA.deleteCard(args.data);
            args.data.forEach(function (card, i) {
                var index = kanbanObjB.kanbanData.findIndex(function (colData) {
                    return colData[kanbanObjB.cardSettings.headerField] === card[kanbanObjB.cardSettings.headerField];
                });
                if (index !== -1) {
                    card[kanbanObjB.cardSettings.headerField] = Math.max.apply(Math, kanbanObjB.kanbanData.map(function (obj) { return parseInt(obj[kanbanObjB.cardSettings.headerField], 10); })) + ++i;
                }
            });
            kanbanObjB.addCard(args.data, args.dropIndex);
            args.cancel = true;
        }
    }
    function onDragStopB(args) {
        var kanbanObjA = document.querySelector("#kanbanA").ej2_instances[0];
        var kanbanObjB = document.querySelector("#kanbanB").ej2_instances[0];
        if (ej.base.closest(args.event.target, '#kanbanA')) {
            kanbanObjB.deleteCard(args.data);
            args.data.forEach(function (card, i) {
                var index = kanbanObjA.kanbanData.findIndex(function (colData) {
                    return colData[kanbanObjA.cardSettings.headerField] === card[kanbanObjA.cardSettings.headerField];
                });
                if (index !== -1) {
                    card[kanbanObjA.cardSettings.headerField] = Math.max.apply(Math, kanbanObjA.kanbanData.map(function (obj) { return parseInt(obj[kanbanObjA.cardSettings.headerField], 10); })) + ++i;
                }
            });
            kanbanObjA.addCard(args.data, args.dropIndex);
            args.cancel = true;
        }
    }
</script>
