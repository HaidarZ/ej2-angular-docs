@using Syncfusion.EJ2
@using Syncfusion.EJ2.Popups
<div class="wrap">
    <ul id="target" tabindex="0">
        <li class="e-item e-palette-item">
            @Html.EJS().ColorPicker("palette").Mode(Syncfusion.EJ2.Inputs.ColorPickerMode.Palette).Inline(true).ModeSwitcher(false).ShowButtons(false).Change("onPaletteChange").Render()
        </li>
        <li class="e-item" tabindex="-1">
            <span class="e-menu-icon e-morecolors"></span>
            More colors...
        </li>
    </ul>
    <div>
        @Html.EJS().ColorPicker("picker").Inline(true).ModeSwitcher(false).Created("onPickerCreated").Change("onPickerChange").Render()
        <h4>Select color</h4>
        @Html.EJS().SplitButton("splitbtn").IconCss("e-icons e-font-icon").Target("#target").Open("onDdPopupOpen").Created("onSplitBtnCreated").BeforeClose("onBeforeDdPopupClose").Render()
        @Html.EJS().Dialog("picker-dialog").CssClass("e-dlg-picker").Created("onLoad").AnimationSettings(new DialogAnimationSettings() { Effect = DialogEffect.Zoom }).IsModal(true).Visible(false).OverlayClick("closePickerDlg").Content("<div class='dlgContent'></div>").Width("270px").Height("336px").Target(".wrap").Render()
    </div>
</div>

<script>
    var splitBtnIcon, dlg, picker;
    function onSplitBtnCreated() {
        splitBtnIcon = document.getElementById("splitbtn");
    }
    function onPickerCreated() {
        picker = document.getElementById("picker");
    }
    function onLoad() {
        dlg = document.getElementById("picker-dialog");
        picker.nextElementSibling.querySelector('.e-ctrl-btn .e-cancel').addEventListener('click', closePickerDlg);
        dlg.querySelector(".dlgContent").appendChild(picker.parentElement);
    }
    function onPickerChange(args) {
        onPaletteChange(args);
        closePickerDlg();
    }
    function onPaletteChange(args) {
        splitBtnIcon.querySelector('.e-font-icon').style.borderBottomColor = args.currentValue.rgba;
    }
    function onDdPopupOpen(args) {
        args.element.children[1].addEventListener('click', openPickerDlg);
    }
    function onBeforeDdPopupClose(args) {
        args.element.children[1].removeEventListener('click', openPickerDlg);
    }
    function openPickerDlg() {
        dlg.ej2_instances[0].show();
    }
    function closePickerDlg() {
        dlg.ej2_instances[0].hide();
    }
</script>

<style>
    .wrap {
        margin: 0 auto;
        width: 100%;
        height: 100%;
        min-height: 350px;
        text-align: center;
    }

    .e-btn-icon.e-font-icon {
        border-bottom-style: solid;
        border-bottom-width: 3px;
    }

     .e-btn-icon.e-font-icon::before {
        content: '\e34c';
     }

    .e-colorpicker-wrapper.e-hide-palette {
        display: none;
    }

    .e-dropdown-popup ul .e-item:first-child.e-palette-item {
        height: auto;
        padding: 0;
    }

    .e-dlg-picker.e-dialog .e-dlg-content {
        padding: 0;
        background-color: transparent;
    }

    .e-dlg-picker.e-dialog {
        max-height: 336px !important;
        background-color: transparent;
    }

    .e-dropdown-popup ul .e-item .e-menu-icon.e-morecolors {
        height: 24px;
        margin-top: 6px;
        width: 24px;
        background-image: linear-gradient(to bottom, #fff 0, #000 100%);
        background-color: #0450c2;
        background-blend-mode: hard-light;
    }
</style>